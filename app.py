# -*- coding: utf-8 -*-
"""emotion_analytics_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u_DW1CvVTqNbGpBkdqy70f3LTpyWx5Ma
"""

import streamlit as st
import cv2
from deepface import DeepFace
import pandas as pd
from datetime import datetime
from fpdf import FPDF
import plotly.express as px
import numpy as np
from PIL import Image

st.title("üòä Real-Time Emotion Detection & Analytics")

# Session state init
if 'run' not in st.session_state:
    st.session_state.run = False
if 'data' not in st.session_state:
    st.session_state.data = pd.DataFrame(columns=['Time', 'Emotion'])

# Start/Stop buttons
col1, col2 = st.columns(2)
if col1.button('Start Camera'):
    st.session_state.run = True
if col2.button('Stop Camera'):
    st.session_state.run = False

FRAME_WINDOW = st.image([])

# Emoji setup
emoji_map = {
    'happy': 'emojis/happy.png',
    'sad': 'emojis/sad.png',
    'angry': 'emojis/angry.png',
    'surprise': 'emojis/surprise.png',
    'neutral': 'emojis/neutral.png',
    'disgust': 'emojis/disgust.png',
    'fear': 'emojis/fear.png'
}
emoji_images = {k: Image.open(v).convert("RGBA").resize((64, 64)) for k,v in emoji_map.items()}

# Start camera
camera = cv2.VideoCapture(0)
frame_count = 0
current_emotion = 'neutral'  # default

while st.session_state.run:
    ret, frame = camera.read()
    if not ret:
        st.write("Failed to capture image")
        break

    frame_count += 1

    # Analyze every 5th frame only
    if frame_count % 5 == 0:
        try:
            analysis = DeepFace.analyze(
                frame,
                actions=['emotion'],
                enforce_detection=False,
                detector_backend='opencv'  # lightweight
            )
            emotion = analysis[0]['dominant_emotion']
            current_emotion = emotion

            # Save to data
            now = datetime.now().strftime("%H:%M:%S")
            new_row = pd.DataFrame({'Time': [now], 'Emotion': [emotion]})
            st.session_state.data = pd.concat([st.session_state.data, new_row], ignore_index=True)

        except Exception as e:
            print(f"Detection error: {e}")

    # Overlay text
    cv2.putText(frame, f'{current_emotion}', (20, 50),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)

    # Overlay emoji
    emoji = emoji_images.get(current_emotion)
    if emoji:
        frame_pil = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
        frame_pil.paste(emoji, (frame_pil.width - 70, 10), emoji)
        frame = cv2.cvtColor(np.array(frame_pil), cv2.COLOR_RGB2BGR)

    # Show frame
    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    FRAME_WINDOW.image(frame)

camera.release()

# Analytics dashboard
if not st.session_state.data.empty:
    st.subheader("üìä Emotion Analytics Dashboard")

    st.write(st.session_state.data)

    counts = st.session_state.data['Emotion'].value_counts().reset_index()
    counts.columns = ['Emotion', 'Count']

    fig_bar = px.bar(counts, x='Emotion', y='Count', color='Emotion', title="Emotion Count")
    st.plotly_chart(fig_bar)

    fig_pie = px.pie(counts, names='Emotion', values='Count', title="Emotion Distribution")
    st.plotly_chart(fig_pie)

    fig_line = px.line(st.session_state.data, x='Time', y='Emotion', title="Emotion Timeline")
    st.plotly_chart(fig_line)

    dominant = counts.iloc[0]['Emotion']
    st.success(f"üòä Dominant emotion detected: **{dominant}**")

    csv = st.session_state.data.to_csv(index=False).encode()
    st.download_button("‚¨áÔ∏è Download CSV", csv, "emotion_data.csv", "text/csv")

    if st.button("üìù Generate PDF Report"):
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, txt="Emotion Detection Session Report", ln=True, align='C')
        for idx, row in st.session_state.data.iterrows():
            pdf.cell(0, 10, f"{row['Time']}: {row['Emotion']}", ln=True)
        pdf.output("emotion_report.pdf")
        with open("emotion_report.pdf", "rb") as f:
            st.download_button("‚¨áÔ∏è Download PDF Report", f, "emotion_report.pdf")

st.caption("generated by pulak saha")